@page "/Incentivo/Create"
@page "/Incentivo/Create{IncentivoId:int}"
@inject IncentivosServices incentivoService
@inject TecnicosServices tecnicosService
@inject TiposTecnicosServices tiposTecnicosService
@rendermode InteractiveServer

<EditForm Model="Incentivos" OnValidSubmit="Guardar">
     <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Incentivos</h3>
        </div>
        <div class="card-body">
                @*IncentivoId*@
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="IncentivoId" class="form-label">IncentivoId:</label>
                        <div class="input-group">
                            <div style="width: 40%; height: 1em;">
                                <InputNumber @bind-Value="Incentivos.IncentivoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                                <ValidationMessage For="@(() => Incentivos.IncentivoId)" />
                            </div>
                        </div>
                    </div>
               </div

            @* Descripcion *@
           <div class="mb-3">
                    <label for="Descripcion" class="form-label">Descripcion:</label>
                    <InputText @bind-Value="Incentivos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Incentivos.Descripcion)" />
          </div>
       
           @* Fecha *@
           <div class="mb-3">
                    <label for="Fecha" class="form-label">Fecha:</label>
                    <InputDate @bind-Value="Incentivos.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Incentivos.Fecha)" />
          </div>
           @*Seleccionar Incentivo*@
                    <div class="col-md-3 mb-3">
                        <label for="Tecnico" class="form-label">Seleccione el Tecnico:</label>
                        <select @bind="TipoSeleccionado" class="form-select">
                        @foreach (var tecnico in ListaTecnicos)
                        {
                             <option value="@tecnico.IdTecnico">@tecnico.Nombre</option>
                        }
                        
                        </select>
                    </div>

            @* Cantidad de Servicios*@
            <div class="mb-3">
                <label for="CantidadServicios" class="form-label">Cantidad de Servicios:</label>
                <InputNumber @bind-Value="Incentivos.CantidadServicios" class="form-control" />
                <ValidationMessage For="@(() => Incentivos.CantidadServicios)" />
            </div>
            
             @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Incentivos.Monto" class="form-control" />
                <ValidationMessage For="@(() => Incentivos.Monto)" />
            </div>
        </div>
     </div>
         <div class="card-footer bg-light d-flex justify-content-center mt-3">
             <div class="btn-group">
                @*Boton Nuevo*@
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                @*Boton Guardar*@
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                @*Boton Retroceder*@
                <a type="button" href="/Incentivo/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
         </div>
    </EditForm>
@code {
    [Parameter]
    public int IncentivoId {get;set;}
    public Incentivos Incentivos { get; set; } = new Incentivos();
    public int TipoSeleccionado{ get; set; }
    public List<Incentivos> ListaIncentivos = new List<Incentivos>();
     public List<TiposTecnicos> ListaTiposTecnicos = new List<TiposTecnicos>();
    public int? incentivoId { get; set; }
    public List<Tecnicos> ListaTecnicos = new List<Tecnicos>();


     protected override void OnInitialized()
    {
        ListaTecnicos = tecnicosService.Listar(c => true);
        ListaIncentivos = incentivoService.Listar(c => true);

        if (incentivoId.HasValue)
        {
            Incentivos.IncentivoId = incentivoId.Value;
        }
    }
    public async Task Guardar()
    {
       Incentivos.TecnicoId = TipoSeleccionado;

    if (await Validar())
    {
        return;
    }
    else
    {
        var guardar = await incentivoService.Guardar(Incentivos);
        if (guardar)
        {
            ListaTiposTecnicos = tiposTecnicosService.Listar(c => true);
            StateHasChanged();
            Nuevo();
        }
    }
    }
    public async Task Nuevo()
    {
        this.Incentivos = new Incentivos();  
    }
     public async Task<bool> Validar()
    {
        bool existeDescripcion = await incentivoService.ExisteDescripcion(Incentivos.Descripcion, Incentivos.IncentivoId);
        return existeDescripcion;
    }
}

